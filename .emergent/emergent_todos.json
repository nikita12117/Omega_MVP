[
  {
    "content": "Explore existing backend structure (server.py, MongoDB collections, auth system)",
    "status": "completed"
  },
  {
    "content": "Update JWT creation to include is_demo and demo_expires_at claims",
    "status": "completed"
  },
  {
    "content": "Update User model with is_demo, demo_expires_at, and google_id fields",
    "status": "completed"
  },
  {
    "content": "Create DemoActivationToken and Feedback Pydantic models",
    "status": "completed"
  },
  {
    "content": "Implement POST /api/demo/activate endpoint with token validation, user creation, JWT issuance",
    "status": "completed"
  },
  {
    "content": "Update GET /api/auth/me endpoint to return is_demo, demo_expires_at, tokens_balance",
    "status": "completed"
  },
  {
    "content": "Implement POST /api/feedback endpoint (authenticated)",
    "status": "completed"
  },
  {
    "content": "Implement POST /api/auth/google/upgrade endpoint for demo->full account conversion",
    "status": "completed"
  },
  {
    "content": "Create demo expiry middleware for /api/generate/* endpoints",
    "status": "completed"
  },
  {
    "content": "Implement POST /api/admin/qr-tokens (generate QR token)",
    "status": "completed"
  },
  {
    "content": "Implement GET /api/admin/qr-tokens (list all tokens with stats)",
    "status": "completed"
  },
  {
    "content": "Implement PUT /api/admin/qr-tokens/{id} (enable/disable token)",
    "status": "completed"
  },
  {
    "content": "Run Python linting on server.py to check for errors",
    "status": "completed"
  },
  {
    "content": "Test demo activation flow with curl",
    "status": "completed"
  }
]